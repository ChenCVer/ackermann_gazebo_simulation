<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from /home/jiaozhu/Documents/code/ros2_dev_ws/install/argus_gazebo/share/argus_gazebo/urdf/autocar_urdf_ackermann.xacro | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<!-- This URDF was automatically created by SolidWorks to URDF Exporter! Originally created by Stephen Brawner (brawner@gmail.com) 
     Commit Version: 1.6.0-1-g15f4949  Build Version: 1.6.7594.29634
     For more information, please see http://wiki.ros.org/sw_urdf_exporter -->
<robot name="Argus_Hunter_2">
  <link name="dummy_base">
  </link>
  <joint name="dummy_base_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="dummy_base"/>
    <child link="frame_link"/>
    <axis xyz="0 0 1"/>
  </joint>
  <link name="frame_link">
    <inertial>
      <origin rpy="0 0 0" xyz="0.0075625 -0.0046146 -0.13361"/>
      <mass value="75"/>
      <inertia ixx="0.031279" ixy="0" ixz="0" iyy="0.098367" iyz="0" izz="0.11285"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/jiaozhu/Documents/code/ros2_dev_ws/src/argus_gazebo_simulation/meshes/visual/chassis_and_frame.STL"/>
      </geometry>
      <material name="">
        <color rgba="0.79216 0.81961 0.93333 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/jiaozhu/Documents/code/ros2_dev_ws/src/argus_gazebo_simulation/meshes/visual/chassis_and_frame.STL"/>
      </geometry>
    </collision>
  </link>
  <link name="bracket_link">
  </link>
  <link name="front_left_steering_link">
    <inertial>
      <origin rpy="0 0 0" xyz="0 0.023901 -0.02621"/>
      <mass value="0.054143"/>
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/jiaozhu/Documents/code/ros2_dev_ws/src/argus_gazebo_simulation/meshes/visual/front_left_steering.STL"/>
      </geometry>
      <material name="">
        <color rgba="0.79216 0.81961 0.93333 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/jiaozhu/Documents/code/ros2_dev_ws/src/argus_gazebo_simulation/meshes/visual/front_left_steering.STL"/>
      </geometry>
    </collision>
  </link>
  <link name="front_right_steering_link">
    <inertial>
      <origin rpy="0 0 0" xyz="0 0.023901 -0.02621"/>
      <mass value="0.054143"/>
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/jiaozhu/Documents/code/ros2_dev_ws/src/argus_gazebo_simulation/meshes/visual/front_right_steering.STL"/>
      </geometry>
      <material name="">
        <color rgba="0.79216 0.81961 0.93333 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/jiaozhu/Documents/code/ros2_dev_ws/src/argus_gazebo_simulation/meshes/visual/front_right_steering.STL"/>
      </geometry>
    </collision>
  </link>
  <link name="front_left_wheel">
    <inertial>
      <origin rpy="0 0 0" xyz="0 0.0016115 0"/>
      <mass value="2.5"/>
      <inertia ixx="0.06368" ixy="0" ixz="0" iyy="0.11064" iyz="0" izz="0.06368"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/jiaozhu/Documents/code/ros2_dev_ws/src/argus_gazebo_simulation/meshes/visual/front_left_wheel.STL"/>
      </geometry>
      <material name="">
        <color rgba="0.24314 0.51765 0.9451 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <geometry>
        <!-- SHOULD use cylinder as collision, otherwise ackermann_driver will failed silently -->
        <cylinder length="0.14" radius="0.165"/>
      </geometry>
    </collision>
  </link>
  <link name="front_right_wheel">
    <inertial>
      <origin rpy="0 0 0" xyz="0 0.0016115 0"/>
      <mass value="2.5"/>
      <inertia ixx="0.06368" ixy="0" ixz="0" iyy="0.11064" iyz="0" izz="0.06368"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/jiaozhu/Documents/code/ros2_dev_ws/src/argus_gazebo_simulation/meshes/visual/front_right_wheel.STL"/>
      </geometry>
      <material name="">
        <color rgba="0.24314 0.51765 0.9451 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <geometry>
        <!-- SHOULD use cylinder as collision, otherwise ackermann_driver will failed silently -->
        <cylinder length="0.14" radius="0.165"/>
      </geometry>
    </collision>
  </link>
  <link name="rear_left_wheel">
    <inertial>
      <origin rpy="0 0 0" xyz="0 0.0016115 0"/>
      <mass value="2.5"/>
      <inertia ixx="0.06368" ixy="0" ixz="0" iyy="0.11064" iyz="0" izz="0.06368"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/jiaozhu/Documents/code/ros2_dev_ws/src/argus_gazebo_simulation/meshes/visual/rear_left_wheel.STL"/>
      </geometry>
      <material name="">
        <color rgba="0.24314 0.51765 0.9451 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <geometry>
        <!-- SHOULD use cylinder as collision, otherwise ackermann_driver will failed silently -->
        <cylinder length="0.14" radius="0.165"/>
      </geometry>
    </collision>
  </link>
  <link name="rear_right_wheel">
    <inertial>
      <origin rpy="0 0 0" xyz="0 0.0016115 0"/>
      <mass value="2.5"/>
      <inertia ixx="0.06368" ixy="0" ixz="0" iyy="0.11064" iyz="0" izz="0.06368"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/jiaozhu/Documents/code/ros2_dev_ws/src/argus_gazebo_simulation/meshes/visual/rear_right_wheel.STL"/>
      </geometry>
      <material name="">
        <color rgba="0.24314 0.51765 0.9451 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <geometry>
        <!-- SHOULD use cylinder as collision, otherwise ackermann_driver will failed silently -->
        <cylinder length="0.14" radius="0.165"/>
      </geometry>
    </collision>
  </link>
  <joint name="front_left_wheel_joint" type="continuous">
    <origin rpy="0 0 0" xyz="0 0.066 -0.026"/>
    <parent link="front_left_steering_link"/>
    <child link="front_left_wheel"/>
    <dynamics damping="0.1" friction="0.1"/>
    <axis xyz="0 1 0"/>
    <limit effort="1000.0" velocity="100"/>
  </joint>
  <joint name="front_right_wheel_joint" type="continuous">
    <origin rpy="0 0 0" xyz="0 -0.066 -0.026"/>
    <parent link="front_right_steering_link"/>
    <child link="front_right_wheel"/>
    <dynamics damping="0.1" friction="0.1"/>
    <axis xyz="0 1 0"/>
    <limit effort="1000.0" velocity="100"/>
  </joint>
  <joint name="front_left_steering_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0.37142 0.234 -0.1695"/>
    <parent link="frame_link"/>
    <child link="front_left_steering_link"/>
    <dynamics damping="0.5" friction="0.01"/>
    <axis xyz="0 0 1"/>
    <limit effort="1000" lower="-0.575" upper="0.575" velocity="100"/>
  </joint>
  <joint name="front_right_steering_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0.37142 -0.234 -0.1695"/>
    <parent link="frame_link"/>
    <child link="front_right_steering_link"/>
    <dynamics damping="0.5" friction="0.01"/>
    <axis xyz="0 0 1"/>
    <limit effort="1000" lower="-0.575" upper="0.575" velocity="100"/>
  </joint>
  <link name="steering">
  </link>
  <joint name="steering_joint" type="continuous">
    <origin rpy="0 0 0" xyz="0.37142 0 -0.1695"/>
    <parent link="frame_link"/>
    <child link="steering"/>
    <axis xyz="0 0 1"/>
  </joint>
  <joint name="rear_left_wheel_joint" type="continuous">
    <origin rpy="0 0 0" xyz="-0.28 0.29 -0.1955"/>
    <parent link="frame_link"/>
    <child link="rear_left_wheel"/>
    <dynamics damping="0.1" friction="0.1"/>
    <axis xyz="0 1 0"/>
    <limit effort="1000.0" velocity="500.0"/>
  </joint>
  <joint name="rear_right_wheel_joint" type="continuous">
    <origin rpy="0 0 0" xyz="-0.28 -0.29 -0.1955"/>
    <parent link="frame_link"/>
    <child link="rear_right_wheel"/>
    <dynamics damping="0.1" friction="0.1"/>
    <axis xyz="0 1 0"/>
    <limit effort="1000.0" velocity="500.0"/>
  </joint>
  <!-- virtual link -->
  <joint name="bracket_link_fix" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="frame_link"/>
    <child link="bracket_link"/>
    <axis xyz="0 0 1"/>
  </joint>
  <link name="front_sonar_link">
    <inertial>
      <origin rpy="0 0 0" xyz="-0.01108 0 0.0015365"/>
      <mass value="0.02"/>
      <inertia ixx="1e-4" ixy="0" ixz="0" iyy="1e-4" iyz="0" izz="1e-4"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/jiaozhu/Documents/code/ros2_dev_ws/src/argus_gazebo_simulation/meshes/visual/sonar.STL"/>
      </geometry>
      <material name="">
        <color rgba="0.46275 0.46275 0.45882 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/jiaozhu/Documents/code/ros2_dev_ws/src/argus_gazebo_simulation/meshes/visual/sonar.STL"/>
      </geometry>
    </collision>
  </link>
  <link name="rear_sonar_link">
    <inertial>
      <origin rpy="0 0 0" xyz="-0.01108 0 0.0015365"/>
      <mass value="0.02"/>
      <inertia ixx="1e-4" ixy="0" ixz="0" iyy="1e-4" iyz="0" izz="1e-4"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/jiaozhu/Documents/code/ros2_dev_ws/src/argus_gazebo_simulation/meshes/visual/sonar.STL"/>
      </geometry>
      <material name="">
        <color rgba="0.46275 0.46275 0.45882 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/jiaozhu/Documents/code/ros2_dev_ws/src/argus_gazebo_simulation/meshes/visual/sonar.STL"/>
      </geometry>
    </collision>
  </link>
  <joint name="front_sonar_link_joint" type="fixed">
    <origin rpy="0 0 0.0 " xyz="0.39 0 0.067054"/>
    <parent link="bracket_link"/>
    <child link="front_sonar_link"/>
    <axis xyz="0 0 0"/>
  </joint>
  <joint name="rear_sonar_link_joint" type="fixed">
    <origin rpy="0 0 3.141592653589793 " xyz="-0.31 0 0.067054"/>
    <parent link="bracket_link"/>
    <child link="rear_sonar_link"/>
    <axis xyz="0 0 0"/>
  </joint>
  <link name="depth_camera_link">
    <inertial>
      <origin rpy="0 0 0" xyz="0.011882 0.00028133 0"/>
      <mass value="0.31104"/>
      <inertia ixx="1e-3" ixy="0" ixz="0" iyy="1e-3" iyz="0" izz="1e-3"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/jiaozhu/Documents/code/ros2_dev_ws/src/argus_gazebo_simulation/meshes/visual/depth_camera.STL"/>
      </geometry>
      <material name="">
        <color rgba="0.79216 0.81961 0.93333 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/jiaozhu/Documents/code/ros2_dev_ws/src/argus_gazebo_simulation/meshes/visual/depth_camera.STL"/>
      </geometry>
    </collision>
  </link>
  <joint name="depth_camera_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0.40492 0 0.1535"/>
    <parent link="bracket_link"/>
    <child link="depth_camera_link"/>
    <axis xyz="0 0 1"/>
  </joint>
  <link name="front_camera_link">
    <inertial>
      <origin rpy="0 0 0" xyz="-0.025397 0.00018743 0"/>
      <mass value="0.05"/>
      <inertia ixx="1e-4" ixy="0" ixz="0" iyy="1e-4" iyz="0" izz="1e-4"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/jiaozhu/Documents/code/ros2_dev_ws/src/argus_gazebo_simulation/meshes/visual/camera.STL"/>
      </geometry>
      <material name="">
        <color rgba="0.79216 0.81961 0.93333 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/jiaozhu/Documents/code/ros2_dev_ws/src/argus_gazebo_simulation/meshes/visual/camera.STL"/>
      </geometry>
    </collision>
  </link>
  <link name="rear_camera_link">
    <inertial>
      <origin rpy="0 0 0" xyz="-0.025397 0.00018743 0"/>
      <mass value="0.05"/>
      <inertia ixx="1e-4" ixy="0" ixz="0" iyy="1e-4" iyz="0" izz="1e-4"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/jiaozhu/Documents/code/ros2_dev_ws/src/argus_gazebo_simulation/meshes/visual/camera.STL"/>
      </geometry>
      <material name="">
        <color rgba="0.79216 0.81961 0.93333 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/jiaozhu/Documents/code/ros2_dev_ws/src/argus_gazebo_simulation/meshes/visual/camera.STL"/>
      </geometry>
    </collision>
  </link>
  <link name="left_camera_link">
    <inertial>
      <origin rpy="0 0 0" xyz="-0.025397 0.00018743 0"/>
      <mass value="0.05"/>
      <inertia ixx="1e-4" ixy="0" ixz="0" iyy="1e-4" iyz="0" izz="1e-4"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/jiaozhu/Documents/code/ros2_dev_ws/src/argus_gazebo_simulation/meshes/visual/camera.STL"/>
      </geometry>
      <material name="">
        <color rgba="0.79216 0.81961 0.93333 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/jiaozhu/Documents/code/ros2_dev_ws/src/argus_gazebo_simulation/meshes/visual/camera.STL"/>
      </geometry>
    </collision>
  </link>
  <link name="right_camera_link">
    <inertial>
      <origin rpy="0 0 0" xyz="-0.025397 0.00018743 0"/>
      <mass value="0.05"/>
      <inertia ixx="1e-4" ixy="0" ixz="0" iyy="1e-4" iyz="0" izz="1e-4"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/jiaozhu/Documents/code/ros2_dev_ws/src/argus_gazebo_simulation/meshes/visual/camera.STL"/>
      </geometry>
      <material name="">
        <color rgba="0.79216 0.81961 0.93333 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/jiaozhu/Documents/code/ros2_dev_ws/src/argus_gazebo_simulation/meshes/visual/camera.STL"/>
      </geometry>
    </collision>
  </link>
  <joint name="front_camera_link_joint" type="fixed">
    <origin rpy="0 0 0.0" xyz="0.395 0 0.76"/>
    <parent link="bracket_link"/>
    <child link="front_camera_link"/>
    <axis xyz="0 0 1"/>
  </joint>
  <joint name="right_camera_link_joint" type="fixed">
    <origin rpy="0 0 1.5707963267948966" xyz="0 0.23 0.76"/>
    <parent link="bracket_link"/>
    <child link="right_camera_link"/>
    <axis xyz="0 0 1"/>
  </joint>
  <joint name="rear_camera_link_joint" type="fixed">
    <origin rpy="0 0 3.141592653589793" xyz="-0.315 0 0.76"/>
    <parent link="bracket_link"/>
    <child link="rear_camera_link"/>
    <axis xyz="0 0 1"/>
  </joint>
  <joint name="left_camera_link_joint" type="fixed">
    <origin rpy="0 0 4.71238898038469" xyz="0 -0.23 0.76"/>
    <parent link="bracket_link"/>
    <child link="left_camera_link"/>
    <axis xyz="0 0 1"/>
  </joint>
  <link name="lidar_link">
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0.036317"/>
      <mass value="0.9"/>
      <inertia ixx="4.1797E-05" ixy="0" ixz="0" iyy="4.1797E-05" iyz="0" izz="6.1861E-05"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/jiaozhu/Documents/code/ros2_dev_ws/src/argus_gazebo_simulation/meshes/visual/lidar.STL"/>
      </geometry>
      <material name="">
        <color rgba="0.082353 0.082353 0.082353 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/jiaozhu/Documents/code/ros2_dev_ws/src/argus_gazebo_simulation/meshes/visual/lidar.STL"/>
      </geometry>
    </collision>
  </link>
  <!-- LiDAR -->
  <joint name="lidar_link_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0.04 0 0.9656"/>
    <parent link="bracket_link"/>
    <child link="lidar_link"/>
    <axis xyz="0 0 -1"/>
  </joint>
  <!-- gazebo plugin gravity color -->
  <gazebo reference="frame_link">
    <mu1 value="0.1"/>
    <mu2 value="0.1"/>
    <!-- <turnGravityOff>false </turnGravityOff> -->
    <material>Gazebo/White</material>
  </gazebo>
  <!-- gazebo plugin gravity color -->
  <gazebo reference="bracket_link">
    <!-- <turnGravityOff>true </turnGravityOff> -->
    <material>Gazebo/White</material>
  </gazebo>
  <gazebo reference="front_left_wheel">
    <!-- <turnGravityOff>false </turnGravityOff>   -->
    <material>Gazebo/DarkGrey</material>
    <mu1 value="1.0"/>
    <mu2 value="1.0"/>
    <kp value="100000000.0"/>
    <kd value="1.0"/>
  </gazebo>
  <gazebo reference="front_right_wheel">
    <!-- <turnGravityOff>false </turnGravityOff>   -->
    <material>Gazebo/DarkGrey</material>
    <mu1 value="1.0"/>
    <mu2 value="1.0"/>
    <kp value="100000000.0"/>
    <kd value="1.0"/>
  </gazebo>
  <gazebo reference="rear_left_wheel">
    <!-- <turnGravityOff>false </turnGravityOff>   -->
    <material>Gazebo/DarkGrey</material>
    <mu1 value="1.0"/>
    <mu2 value="1.0"/>
    <kp value="100000000.0"/>
    <kd value="1.0"/>
  </gazebo>
  <gazebo reference="rear_right_wheel">
    <!-- <turnGravityOff>false </turnGravityOff>   -->
    <material>Gazebo/DarkGrey</material>
    <mu1 value="1.0"/>
    <mu2 value="1.0"/>
    <kp value="100000000.0"/>
    <kd value="1.0"/>
  </gazebo>
  <!-- ackmann driver model -->
  <gazebo>
    <plugin filename="libgazebo_ros_ackermann_drive.so" name="gazebo_ros_ackermann_drive">
      <ros>
        <namespace>/orbbec_hunter2</namespace>
        <remapping> cmd_vel:=cmd_vel </remapping>
        <remapping> odom:=odom </remapping>
        <remapping> distance:=distance </remapping>
      </ros>
      <update_rate>50.0</update_rate>
      <!-- wheels -->
      <front_left_joint>front_left_wheel_joint</front_left_joint>
      <front_right_joint>front_right_wheel_joint</front_right_joint>
      <rear_left_joint>rear_left_wheel_joint</rear_left_joint>
      <rear_right_joint>rear_right_wheel_joint</rear_right_joint>
      <!-- steering joints -->
      <left_steering_joint>front_left_steering_joint</left_steering_joint>
      <right_steering_joint>front_right_steering_joint</right_steering_joint>
      <steering_wheel_joint>steering_joint </steering_wheel_joint>
      <!-- Other parameters remain the same -->
      <max_steer>0.6458</max_steer>
      <max_steering_angle>7.85</max_steering_angle>
      <max_speed>20</max_speed>
      <!-- PID tuning -->
      <left_steering_pid_gain>1500 0 1</left_steering_pid_gain>
      <left_steering_i_range>0 0</left_steering_i_range>
      <right_steering_pid_gain>1500 0 1</right_steering_pid_gain>
      <right_steering_i_range>0 0</right_steering_i_range>
      <linear_velocity_pid_gain>1000 0 1</linear_velocity_pid_gain>
      <linear_velocity_i_range>0 0</linear_velocity_i_range>
      <!-- output -->
      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>
      <publish_wheel_tf>false</publish_wheel_tf>
      <publish_distance>true</publish_distance>
      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>frame_link</robot_base_frame>
    </plugin>
  </gazebo>
  <!-- laser sensor -->
  <gazebo reference="lidar_link">
    <material>Gazebo/Black</material>
    <sensor name="rplidar" type="ray">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>5.5</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>360</samples>
            <resolution>1</resolution>
            <min_angle>-3</min_angle>
            <max_angle>3</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>6.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin filename="libgazebo_ros_ray_sensor.so" name="gazebo_rplidar">
        <ros>
          <remapping> ~/out:=scan </remapping>
        </ros>
        <laser_topic_name>scan</laser_topic_name>
        <frame_name>lidar</frame_name>
        <output_type>sensor_msgs/LaserScan</output_type>
      </plugin>
    </sensor>
  </gazebo>
  <gazebo reference="front_camera_link">
    <material>Gazebo/Black</material>
  </gazebo>
  <gazebo reference="front_camera_link">
    <sensor name="camera_node" type="camera">
      <update_rate>30.0</update_rate>
      <camera name="front">
        <horizontal_fov>2.059488</horizontal_fov>
        <!-- 水平FOV，以弧度为单位 -->
        <vertical_fov>1.082</vertical_fov>
        <!-- 垂直FOV，以弧度为单位 -->
        <image>
          <width>1920</width>
          <height>1080</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="front_camera">
        <image_topic_name>image_raw</image_topic_name>
        <camera_info_topic_name>camera_info</camera_info_topic_name>
        <camera_name>front_color_camera</camera_name>
        <frame_name>front_camera</frame_name>
        <hack_baseline>0.2</hack_baseline>
      </plugin>
    </sensor>
  </gazebo>
  <gazebo reference="left_camera_link">
    <material>Gazebo/Black</material>
  </gazebo>
  <gazebo reference="left_camera_link">
    <sensor name="camera_node" type="camera">
      <update_rate>30.0</update_rate>
      <camera name="left">
        <horizontal_fov>2.059488</horizontal_fov>
        <!-- 水平FOV，以弧度为单位 -->
        <vertical_fov>1.082</vertical_fov>
        <!-- 垂直FOV，以弧度为单位 -->
        <image>
          <width>1920</width>
          <height>1080</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="left_camera">
        <image_topic_name>image_raw</image_topic_name>
        <camera_info_topic_name>camera_info</camera_info_topic_name>
        <camera_name>left_color_camera</camera_name>
        <frame_name>left_camera</frame_name>
        <hack_baseline>0.2</hack_baseline>
      </plugin>
    </sensor>
  </gazebo>
  <gazebo reference="rear_camera_link">
    <material>Gazebo/Black</material>
  </gazebo>
  <gazebo reference="rear_camera_link">
    <sensor name="camera_node" type="camera">
      <update_rate>30.0</update_rate>
      <camera name="rear">
        <horizontal_fov>2.059488</horizontal_fov>
        <!-- 水平FOV，以弧度为单位 -->
        <vertical_fov>1.082</vertical_fov>
        <!-- 垂直FOV，以弧度为单位 -->
        <image>
          <width>1920</width>
          <height>1080</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="rear_camera">
        <image_topic_name>image_raw</image_topic_name>
        <camera_info_topic_name>camera_info</camera_info_topic_name>
        <camera_name>rear_color_camera</camera_name>
        <frame_name>rear_camera</frame_name>
        <hack_baseline>0.2</hack_baseline>
      </plugin>
    </sensor>
  </gazebo>
  <gazebo reference="right_camera_link">
    <material>Gazebo/Black</material>
  </gazebo>
  <gazebo reference="right_camera_link">
    <sensor name="camera_node" type="camera">
      <update_rate>30.0</update_rate>
      <camera name="right">
        <horizontal_fov>2.059488</horizontal_fov>
        <!-- 水平FOV，以弧度为单位 -->
        <vertical_fov>1.082</vertical_fov>
        <!-- 垂直FOV，以弧度为单位 -->
        <image>
          <width>1920</width>
          <height>1080</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="right_camera">
        <image_topic_name>image_raw</image_topic_name>
        <camera_info_topic_name>camera_info</camera_info_topic_name>
        <camera_name>right_color_camera</camera_name>
        <frame_name>right_camera</frame_name>
        <hack_baseline>0.2</hack_baseline>
      </plugin>
    </sensor>
  </gazebo>
  <!-- imu sensor-->
  <gazebo reference="depth_camera_link">
    <material>Gazebo/Black</material>
    <sensor name="imu_sensor" type="imu">
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <ros>
          <remapping>~/out:=imu</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
      </plugin>
      <always_on>true</always_on>
      <update_rate>60</update_rate>
      <visualize>true</visualize>
      <imu>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
    </sensor>
  </gazebo>
  <!-- depth camera sensor -->
  <gazebo reference="depth_camera_link">
    <sensor name="kinect" type="depth">
      <always_on>true</always_on>
      <update_rate>15.0</update_rate>
      <pose>0 0 0 0 0 0</pose>
      <camera name="kinect">
        <horizontal_fov>1.587</horizontal_fov>
        <vertical_fov>1.15</vertical_fov>
        <image>
          <format>R8G8B8</format>
          <width>1280</width>
          <height>800</height>
        </image>
        <clip>
          <near>0.05</near>
          <far>10.0</far>
        </clip>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="kinect_controller">
        <ros>
          <remapping>depth_camera/image_raw:=rgb/image_raw</remapping>
          <remapping>depth_camera/image_depth:=depth/image_raw</remapping>
          <remapping>depth_camera/camera_info:=rgb/camera_info</remapping>
          <remapping>depth_camera/camera_info_depth:=depth/camera_info</remapping>
          <remapping>depth_camera/points:=depth/points</remapping>
        </ros>
        <camera_name>front_depth_camera</camera_name>
        <frame_name>depth_camera_link</frame_name>
        <hack_baseline>0.07</hack_baseline>
        <min_depth>0.001</min_depth>
        <max_depth>300.0</max_depth>
      </plugin>
    </sensor>
  </gazebo>
  <gazebo reference="front_sonar_link">
    <material>Gazebo/Black</material>
    <sensor name="front_ultrasonic_sensor" type="ray">
      <pose>0 0 0 0 0 0</pose>
      <!-- 是否可视化，gazebo里能不能看到 -->
      <visualize>true</visualize>
      <!-- 扫描速率，也就是数据更新速率 -->
      <update_rate>20</update_rate>
      <ray>
        <scan>
          <!-- 水平扫描的点数 -->
          <horizontal>
            <samples>30</samples>
            <resolution>1</resolution>
            <min_angle>-0.523</min_angle>
            <max_angle>0.523</max_angle>
          </horizontal>
          <!-- 垂直方向扫描的点数 -->
          <vertical>
            <samples>5</samples>
            <resolution>1</resolution>
            <min_angle>-0.523</min_angle>
            <max_angle>0.523</max_angle>
          </vertical>
        </scan>
        <!-- 超声波检测的范围和数据分辨率单位m -->
        <range>
          <min>0.025</min>
          <max>0.45</max>
          <resolution>0.001</resolution>
        </range>
        <!-- 数据噪声采用高斯噪声 -->
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin filename="libgazebo_ros_ray_sensor.so" name="front_ultrasonic_sensor_controller">
        <ros>
          <!-- 重映射输出的话题名称 -->
          <remapping>~/out:=front_ultrasonic</remapping>
        </ros>
        <!-- 输出消息的类型，注意与雷达区分，这里是sensor_msgs/Range -->
        <output_type>sensor_msgs/Range</output_type>
        <!-- 射线类型，这里要写ultrasound，注意和雷达区分 -->
        <radiation_type>ultrasound</radiation_type>
        <!-- frame名称，填写link名称即可 -->
        <frame_name>front_sonar_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>
  <gazebo reference="rear_sonar_link">
    <material>Gazebo/Black</material>
    <sensor name="rear_ultrasonic_sensor" type="ray">
      <pose>0 0 0 0 0 0</pose>
      <!-- 是否可视化，gazebo里能不能看到 -->
      <visualize>true</visualize>
      <!-- 扫描速率，也就是数据更新速率 -->
      <update_rate>20</update_rate>
      <ray>
        <scan>
          <!-- 水平扫描的点数 -->
          <horizontal>
            <samples>30</samples>
            <resolution>1</resolution>
            <min_angle>-0.523</min_angle>
            <max_angle>0.523</max_angle>
          </horizontal>
          <!-- 垂直方向扫描的点数 -->
          <vertical>
            <samples>5</samples>
            <resolution>1</resolution>
            <min_angle>-0.523</min_angle>
            <max_angle>0.523</max_angle>
          </vertical>
        </scan>
        <!-- 超声波检测的范围和数据分辨率单位m -->
        <range>
          <min>0.025</min>
          <max>0.45</max>
          <resolution>0.001</resolution>
        </range>
        <!-- 数据噪声采用高斯噪声 -->
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin filename="libgazebo_ros_ray_sensor.so" name="rear_ultrasonic_sensor_controller">
        <ros>
          <!-- 重映射输出的话题名称 -->
          <remapping>~/out:=rear_ultrasonic</remapping>
        </ros>
        <!-- 输出消息的类型，注意与雷达区分，这里是sensor_msgs/Range -->
        <output_type>sensor_msgs/Range</output_type>
        <!-- 射线类型，这里要写ultrasound，注意和雷达区分 -->
        <radiation_type>ultrasound</radiation_type>
        <!-- frame名称，填写link名称即可 -->
        <frame_name>rear_sonar_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>
</robot>
